// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Login {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_REQLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::REQLogin, global::REQLogin.Builder> internal__static_REQLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RLTLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RLTLogin, global::RLTLogin.Builder> internal__static_RLTLogin__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Login() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtMb2dpbi5wcm90byItCghSRVFMb2dpbhIPCgdBY2NvdW50GAEgAigNEhAK", 
          "CFBhc3N3b3JkGAIgAigNIiYKCFJMVExvZ2luEg4KBlJlc3VsdBgBIAIoDRIK", 
        "CgJJZBgCIAIoDQ=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_REQLogin__Descriptor = Descriptor.MessageTypes[0];
      internal__static_REQLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::REQLogin, global::REQLogin.Builder>(internal__static_REQLogin__Descriptor,
              new string[] { "Account", "Password", });
      internal__static_RLTLogin__Descriptor = Descriptor.MessageTypes[1];
      internal__static_RLTLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RLTLogin, global::RLTLogin.Builder>(internal__static_RLTLogin__Descriptor,
              new string[] { "Result", "Id", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class REQLogin : pb::GeneratedMessage<REQLogin, REQLogin.Builder> {
  private REQLogin() { }
  private static readonly REQLogin defaultInstance = new REQLogin().MakeReadOnly();
  private static readonly string[] _rEQLoginFieldNames = new string[] { "Account", "Password" };
  private static readonly uint[] _rEQLoginFieldTags = new uint[] { 8, 16 };
  public static REQLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override REQLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override REQLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Login.internal__static_REQLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<REQLogin, REQLogin.Builder> InternalFieldAccessors {
    get { return global::Login.internal__static_REQLogin__FieldAccessorTable; }
  }
  
  public const int AccountFieldNumber = 1;
  private bool hasAccount;
  private uint account_;
  public bool HasAccount {
    get { return hasAccount; }
  }
  [global::System.CLSCompliant(false)]
  public uint Account {
    get { return account_; }
  }
  
  public const int PasswordFieldNumber = 2;
  private bool hasPassword;
  private uint password_;
  public bool HasPassword {
    get { return hasPassword; }
  }
  [global::System.CLSCompliant(false)]
  public uint Password {
    get { return password_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAccount) return false;
      if (!hasPassword) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _rEQLoginFieldNames;
    if (hasAccount) {
      output.WriteUInt32(1, field_names[0], Account);
    }
    if (hasPassword) {
      output.WriteUInt32(2, field_names[1], Password);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccount) {
      size += pb::CodedOutputStream.ComputeUInt32Size(1, Account);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeUInt32Size(2, Password);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static REQLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static REQLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static REQLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static REQLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static REQLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static REQLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static REQLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static REQLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static REQLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static REQLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private REQLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(REQLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<REQLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(REQLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private REQLogin result;
    
    private REQLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        REQLogin original = result;
        result = new REQLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override REQLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::REQLogin.Descriptor; }
    }
    
    public override REQLogin DefaultInstanceForType {
      get { return global::REQLogin.DefaultInstance; }
    }
    
    public override REQLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is REQLogin) {
        return MergeFrom((REQLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(REQLogin other) {
      if (other == global::REQLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccount) {
        Account = other.Account;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_rEQLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _rEQLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccount = input.ReadUInt32(ref result.account_);
            break;
          }
          case 16: {
            result.hasPassword = input.ReadUInt32(ref result.password_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccount {
      get { return result.hasAccount; }
    }
    [global::System.CLSCompliant(false)]
    public uint Account {
      get { return result.Account; }
      set { SetAccount(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccount(uint value) {
      PrepareBuilder();
      result.hasAccount = true;
      result.account_ = value;
      return this;
    }
    public Builder ClearAccount() {
      PrepareBuilder();
      result.hasAccount = false;
      result.account_ = 0;
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    [global::System.CLSCompliant(false)]
    public uint Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPassword(uint value) {
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = 0;
      return this;
    }
  }
  static REQLogin() {
    object.ReferenceEquals(global::Login.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RLTLogin : pb::GeneratedMessage<RLTLogin, RLTLogin.Builder> {
  private RLTLogin() { }
  private static readonly RLTLogin defaultInstance = new RLTLogin().MakeReadOnly();
  private static readonly string[] _rLTLoginFieldNames = new string[] { "Id", "Result" };
  private static readonly uint[] _rLTLoginFieldTags = new uint[] { 16, 8 };
  public static RLTLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RLTLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RLTLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Login.internal__static_RLTLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RLTLogin, RLTLogin.Builder> InternalFieldAccessors {
    get { return global::Login.internal__static_RLTLogin__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private uint result_;
  public bool HasResult {
    get { return hasResult; }
  }
  [global::System.CLSCompliant(false)]
  public uint Result {
    get { return result_; }
  }
  
  public const int IdFieldNumber = 2;
  private bool hasId;
  private uint id_;
  public bool HasId {
    get { return hasId; }
  }
  [global::System.CLSCompliant(false)]
  public uint Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasResult) return false;
      if (!hasId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _rLTLoginFieldNames;
    if (hasResult) {
      output.WriteUInt32(1, field_names[1], Result);
    }
    if (hasId) {
      output.WriteUInt32(2, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeUInt32Size(1, Result);
    }
    if (hasId) {
      size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RLTLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RLTLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RLTLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RLTLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RLTLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RLTLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RLTLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RLTLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RLTLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RLTLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RLTLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RLTLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RLTLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RLTLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RLTLogin result;
    
    private RLTLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        RLTLogin original = result;
        result = new RLTLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RLTLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RLTLogin.Descriptor; }
    }
    
    public override RLTLogin DefaultInstanceForType {
      get { return global::RLTLogin.DefaultInstance; }
    }
    
    public override RLTLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RLTLogin) {
        return MergeFrom((RLTLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RLTLogin other) {
      if (other == global::RLTLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_rLTLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _rLTLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadUInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasId = input.ReadUInt32(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    [global::System.CLSCompliant(false)]
    public uint Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetResult(uint value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetId(uint value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
  }
  static RLTLogin() {
    object.ReferenceEquals(global::Login.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
